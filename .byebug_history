continue
contnue
self.state_wise_cases.values.flatten.select {|ac| ac.status == 'rejected' }.each {|ac| puts "Case id: #{ac.id}, State: #{ac.state}"}; nil
self.state_wise_cases.values.flatten.select {|ac| ac.status == 'rejected' }.each {|ac| puts "Case id: #{ac.id}, State: #{ac.state}"}; ""
self.state_wise_cases.values.flatten.select {|ac| ac.status == 'rejected' }.each {|ac| puts "Case id: #{ac.id}, State: #{ac.state}"}
self.state_wise_cases.values.flatten.select {|ac| ac.status == 'rejected' }
self.state_wise_cases.values
self
continue
self
advocates
continue
self
continue
adv_case
continue
advocates.map {|adv| adv.state_wise_cases.values}.flatten.select{|ac| ac.id == case_id }
 advocates.map {|adv| adv.state_wise_cases.values}.flatten
advocates.map {|adv| adv.state_wise_cases.values}.flatten.select{|ac| puts ac.id == case_id }
advocates.map {|adv| adv.state_wise_cases.values}.flatten.select{|ac| puts ac.id == case_id }.first
continue
advocates.map {|adv| adv.state_wise_cases.values}.flatten.select{|ac| ac.id == case_id }
advocates.map {|adv| adv.state_wise_cases.values}.flatten.select{|ac| puts ac.id == case_id }
advocates.map {|adv| adv.state_wise_cases.values}.flatten.select{|ac| puts ac.id }
case_id
advocates.map {|adv| adv.state_wise_cases.values}.flatten.select{|ac| ac.id == "case_id" }
advocates.map {|adv| adv.state_wise_cases.values}.flatten
advocates
continue
advocates.map {|adv| adv.state_wise_cases.values}.flatten
advocates.map {|adv| adv.state_wise_cases.values}.flatten.select{|case| case.id == "C1" }
advocates.map {|adv| adv.state_wise_cases.values}.flatten.filter{|case| case.id == "C1" }
advocates.map {|adv| adv.state_wise_cases.values}.flatten.filter {|case| case.id == "C1" }
advocates.map {|adv| adv.state_wise_cases.values}.flatten
advocates.map {|adv| adv.state_wise_cases.values}
advocates
continue
case_id
continue
result.each {|k, v| puts "Advocate id: #{k}, Cases: #{v.join(', ')}" }
advocates.map {|ad| ad.state_wise_cases[state_name] }.compact.flatten.each{|ac| result[ac.advocate_id].nil? ? result[ac.advocate_id] = [ac.id] : result[ac.advocate_id] << ac.id  }
advocates.map {|ad| ad.state_wise_cases[state_name] }.compact
advocates.map {|ad| ad.state_wise_cases[state_name] }
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten.each{|ac| result[ac.advocate_id].nil? ? result[ac.advocate_id] = [ac.id] : result[ac.advocate_id] << ac.id  }
continue
result.each {|k, v| puts "Advocate id: #{k}, Cases: #{v.join(', ')}" }
result.each {|k, v| puts "Advocate id: #{k}, Cases: v.join(', ')" }
result
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten.each{|ac| result[ac.advocate_id].nil? ? result[ac.advocate_id] = [ac.id] : result[ac.advocate_id] << ac.id  }
state_name = "MH"
result = {}
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten.each{|ac| result[ac.advocate_id].nil? ? result[ac.advocate_id] = [ac.id] : result[ac.advocate_id] << ac.id  }
result
result = {}
result
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten.each{|ac| result[ac.advocate_id].nil? ? result[ac.advocate_id] = [ac.id] : result[ac.advocate_id] << ac.id  }
result = {}
state_name = "KL"
result
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten.each{|ac| result[ac.advocate_id].nil? ? result[ac.advocate_id] = [ac.id] : result[ac.advocate_id] << ac.id  }
result = {}
result[state_name] = []
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten.each{|ac| puts ac.id }
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten.each {|rec| rec.id }
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten.each {|rec| result[rec.advocate_id] << rec.id }
advocates.map {|ad| ad.state_wise_cases[state_name] }.flatten
advocates.map {|ad| ad.state_wise_cases[state_name] }
advocates.map {|ad| ad.state_wise_cases[state_name] }.each {|rec| result[rec.advocate_id] << rec.id }
continue
advocates.map {|ad| ad.state_wise_cases[state_name] }.each {|rec| r[advocate_id] << rec.idcontinue }
r = {}
advocates.map {|ad| ad.state_wise_cases[state_name] }
advocates
advocates.each {|ad| ad.state_wise_cases.each {|state, cases| puts "State: #{state}, Cases: #{cases.map{|c| c.id}.join(', ')}"}}
advocates[0].state_wise_cases.each {|state, cases| puts "State: #{state}, Cases: #{cases.map{|c| c.id}.join(', ')}"}
advocates[0].state_wise_cases.each {|key, value| puts "Key: #{key}, value: #{value}"}
advocates[0].state_wise_cases.each {|a| puts a}
continue
advocates[0].state_wise_cases.each {|a| puts a}
advocates[0].state_wise_cases
advocates[0]
state_name
continue
self.state_wise_cases.values.flatten.any? {|ac| ac.id == case_id}
self.state_wise_cases.values.flatten
self.state_wise_cases.values
self.state_wise_cases
continue
self.state_wise_cases.values.to_a
self.state_wise_cases.values
self.state_wise_cases
continue
self.state_wise_cases.values[0].to_a
self.state_wise_cases.values[0]
self.state_wise_cases.values
self.state_wise_cases.values.to_a[0].id
self.state_wise_cases["KL"].to_a[0].id
self.state_wise_cases["KL"].to_a[0]
self.state_wise_cases["KL"].to_a
self.state_wise_cases["KL"].id
self.state_wise_cases["KL"][0]
self.state_wise_cases["KL"]
self.state_wise_cases
self
advocates
advocates[0]
continue
contiue
state_wise_cases.values.flatten.to_a[0][0]
state_wise_cases.values.flatten.to_a[0].id
state_wise_cases.values.flatten.to_a[0].ac
state_wise_cases.values.flatten.to_a[0]
state_wise_cases.values.flatten.to_a.any? {|ac| ac.id == 'c1'}
state_wise_cases.values.flatten.to_a
state_wise_cases.values.flatten[0]
state_wise_cases.values.flatten[0].id
state_wise_cases.values.flatten[0][0]
state_wise_cases.values.flatten[0]
state_wise_cases.values.flatten.any? {|ac| puts ac.id}
state_wise_cases.values.flatten
state_wise_cases.values.each {|ac| puts ac.id }
state_wise_cases.values.each {|ac| puts ac }
state_wise_cases.values.any? {|ac| ac.id == 'c1' }
state_wise_cases.values
state_wise_cases["KL"]
state_wise_cases
continue
case_id = "c2"
case_id = c2
case_id
state_wise_cases[state_name]
continue
self.state_wise_cases[state_name].nil? ? self.state_wise_cases[state_name] = Set.new(new_case) : self.state_wise_cases[state_name] << new_case
Set.new([1])
Set.new(1)
self.state_wise_cases[state_name] = Set.new(new_case)
self.state_wise_cases[state_name].nil?
self.state_wise_cases[state_name].nil? ? self.state_wise_cases[state_name] = Set.new(new_case) : self.state_wise_cases[state_name] << new_case
self.state_wise_cases[state_name]
self.state_wise_cases
self.state_wise_cases[state_name].nil? ? self.state_wise_cases[state_name] = Set.new(new_case) : self.state_wise_cases[state_name] << new_case
self.state_wise_cases[state_name].nil?
next
continue
state_wise_cases
state_name
continue
state_wise_cases.include?(state_name)
continue
advocates.any? { |adv| adv.id == new_adv.id }
advocates.select(:id)
advocates.pluck(:id)
new_adv
advocates
self.advocates.include?(new_adv)
advocates.include?(new_adv)
continue
advocates.include?(new_adv)
new_adv
advocates
continue
